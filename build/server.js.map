{"version":3,"sources":["../src/server.js"],"names":["require","config","SocketServer","Server","RP","spotify","urls","router","express","Router","allowCrossDomain","req","res","next","header","method","send","use","setHeader","wss","master","track_uri","track_name","artist_name","play_position","selector_name","selector_token","album_cover","host","token","name","users","rooms","system_message_buffer","JSON","stringify","type","user_object","master_object","message","message_buffer","getCurrentUser","allUsers","user_to_return","forEach","user","get","state","cookie","STATE_KEY","redirect","querystring","spotifyOptions","HOST_REDIRECT_URI","MODE","console","log","GUEST_REDIRECT_URI","ERROR","code","query","storedState","headers","split","queryStringError","clearCookie","post","authOptions","error","response","body","statusCode","access_token","getUserOptions","then","user_details","display_name","roomId","push","CONNECTION","pollUsersPlayback","catch","e","newUser","checkCurrentTrack","obj","setPlaybackOptions","PLAYBACK_DELAY","room_index","findIndex","x","syncToMaster","allRoomUsers","some","result","getTrack","track","album","images","url","SELECTOR_CALLS","Math","floor","random","length","clients","each","client","splice","indexOf","resync","setInterval","room","Promise","resolve","reject","getPlaybackOptions","master_ref","item","uri","artists","progress_ms","app","listen","SERVER_PORT","server","path","on","connection","ws"],"mappings":"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","file":"server.js","sourcesContent":["/*jshint esversion: 6 */\n// SETTINGS\n// DEPENDANCIES\nrequire('dotenv').config();\nimport express from 'express';\nimport querystring from 'querystring';\nconst SocketServer = require('ws').Server;\nconst RP = require('request-promise');\nconst spotify = require('./utils/spotify_func');\nconst config = require('./utils/config');\nconst urls = require('./utils/urls');\n\n// IMPORTS\nimport {URLfactory, defaultNameCheck, generateRandomString, wait_promise, queryStringError, makeBuffer} from './utils/tools'\nimport {SELECTOR_CALLS, ERROR, MODE, CONNECTION} from './utils/constants'\n\nconst router = express.Router();\n\n// Cross Domain Origin Setup\nvar allowCrossDomain = function (req, res, next) {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n  if ('OPTIONS' == req.method) {\n    res.send(200);\n  }\n  else {\n    next();\n  }\n};\n\nexpress().use(allowCrossDomain);\nexpress().use(function (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n  res.setHeader('Access-Control-Allow-Credentials', true);\n  next();\n});\n\n// Global state\nlet wss\nlet master = {\n  track_uri: null,\n  track_name: null,\n  artist_name: null,\n  play_position: null,\n  selector_name: null,\n  selector_token: null,\n  album_cover: null,\n};\nconst host = { token: null, name: null };\nlet users = [];\nlet rooms = [];\nlet system_message_buffer = JSON.stringify({\n  type: '',\n  user_object: {},\n  master_object: {},\n  message: 'test'\n});\nlet message_buffer = JSON.stringify({\n  type: '',\n  user_object: {},\n  master_object: {},\n  message: 'test'\n});\n\n\n// get user details object from Spotify with token\nconst getCurrentUser = (token) => {\n  let allUsers = [...users, host];\n  let user_to_return;\n  allUsers.forEach(user => {\n    if (user.token === token) {\n      user_to_return = user;\n    }\n  });\n  return user_to_return;\n};\n\n\n// Endpoints \n// Host login\nrouter.get('/login', function (req, res) {\n  const state = generateRandomString(16);\n  res.cookie(config.STATE_KEY, state);\n  if (!host.token) {\n    res.redirect(`https://accounts.spotify.com/authorize?${querystring.stringify(spotify.spotifyOptions(urls.HOST_REDIRECT_URI[config.MODE], state))}`)\n  } else {\n    res.redirect(URLfactory('alreadyHosted'));\n    console.log('already hosted')\n  }\n});\n// Guest Login\nrouter.get('/invite', function (req, res) {\n  const state = generateRandomString(16);\n  res.cookie(config.STATE_KEY, state);\n  if (host.token) {\n    res.redirect(`https://accounts.spotify.com/authorize?${querystring.stringify(spotify.spotifyOptions(urls.GUEST_REDIRECT_URI[config.MODE], state))}`);\n  } else {\n    res.redirect(URLfactory('no_Host_Connected', ERROR));\n    console.log('No Host Connected')\n  }\n});\n// Host Callback from spotify\nrouter.get('/callback', function (req, res) {\n  const code = req.query.code || null;\n  const state = req.query.state || null;\n  const storedState = req.headers.cookie ? req.headers.cookie.split(`${config.STATE_KEY}=`)[1] : null;\n  if (state === null || state !== storedState) {\n    res.redirect('/#' + queryStringError);\n  } else {\n    res.clearCookie(config.STATE_KEY);\n\n    RP.post(spotify.authOptions(urls.HOST_REDIRECT_URI[config.MODE], code), function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        host.token = body.access_token;\n        /* get user details and start websockets. Send greeting and token to client then start\n        polling the spotify api for track changes */\n        RP(spotify.getUserOptions(host))\n          .then((user_details) => {\n            host.name = defaultNameCheck(user_details.display_name)\n            let roomId = generateRandomString(8);\n            rooms.push({ roomId : roomId, host: host, users:[] });\n            system_message_buffer = makeBuffer(`${defaultNameCheck(host.name)} stepped up to the 1210s..`, host, master, CONNECTION)\n            res.redirect(URLfactory('hostLoggedIn?' + querystring.stringify({ token: host.token, roomId: roomId })));\n            pollUsersPlayback();\n          })\n          .catch(e => {\n            res.redirect(URLfactory('getting_host_options', ERROR));\n            console.log('Getting host options ', e)\n          });\n      } else {\n        res.redirect(URLfactory('spotify_host_auth', ERROR));\n        console.log('Spotify host auth ', e)\n      }\n    });\n  }\n});\n// Guest callback from Spotify\nrouter.get('/guestcallback', function (req, res) {\n  const code = req.query.code || null;\n  const state = req.query.state || null;\n  const roomId = req.query.roomId || null;\n  const storedState = req.headers.cookie ? req.headers.cookie.split(`${config.STATE_KEY}=`)[1] : null;\n  if (state === null || state !== storedState || roomId === null ) {\n    res.redirect('/#' + queryStringError);\n  } else {\n    res.clearCookie(config.STATE_KEY);\n\n    RP.post(spotify.authOptions(urls.GUEST_REDIRECT_URI[config.MODE], code), function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        let newUser = {};\n        newUser.token = body.access_token;\n        RP(spotify.getUserOptions(newUser))\n          .then( user_details => {\n            console.log(`${user_details.name} trying to join.`);\n            newUser.name = user_details.display_name;\n\n            return checkCurrentTrack(host, master);\n          })\n          .then( obj => {\n            master = obj;\n            // after current track in master state is checked set playback for current user\n            return RP(spotify.setPlaybackOptions(newUser, master, config.PLAYBACK_DELAY));\n          })\n          .then( () => {\n            // find room and add user\n            let room_index = rooms.findIndex(x => x.roomId == roomId);\n            rooms[room_index].users.push(newUser);\n            system_message_buffer = makeBuffer(`${defaultNameCheck(newUser.name)} joined the party...`, newUser, master, CONNECTION)\n            res.redirect(URLfactory('guestLoggedIn?' + querystring.stringify({ token: newUser.token })))\n          })\n          .catch(e => {\n            res.redirect(URLfactory('guest_sync', ERROR))\n            console.log('Error in guest sync ', e)\n          })\n      } else {\n        res.redirect(URLfactory('guest_callback', ERROR))\n        console.log('Error in guest callback ', e)\n      }\n    })\n  }\n});\n\n\nconst syncToMaster = (host, users) => {\n  if (host.token && users) {\n    let allRoomUsers = [...users, host]\n    // make reference to users, leave global users array immutable\n    allRoomUsers.some(\n      (user) => {\n        wait_promise(350)\n          .then(() => checkCurrentTrack(user))\n          .then(result => {\n            if (result.track_uri !== master.track_uri) {\n              // Check users current track, if URI is different to one in master state ...\n              master = result\n              return RP(spotify.getTrack(user, master.track_uri.split('track:')[1]))\n                .then((track)=>{\n                  master.album_cover = track.album.images[0].url\n                  /* get the new tracks cover image and set the master to the new track that is taking over\n                  then set the system message buffer to send update info to the client */\n                  system_message_buffer = makeBuffer(\n                    `${defaultNameCheck(master.selector_name)} ${SELECTOR_CALLS[Math.floor(Math.random() * SELECTOR_CALLS.length)]} ${master.track_name}!!`,\n                    user,\n                    master,\n                    'track_change'\n                  )\n                  wss.clients.forEach(function each(client) {\n                    client.send(system_message_buffer);\n                  });\n                  /* remove the current user from the reference to the array of users\n                  and then run through all the remaining users setting their track details to master */\n                  allRoomUsers.splice(allRoomUsers.indexOf(user), 1)\n                  resync(allRoomUsers, master);\n                  return true\n                })\n            }\n          })\n          .catch(e => console.log('Error in sync to master ', e.message))\n      })\n  } else {\n    // console.log('only one user in the room');\n  }\n}\n\nconst resync = (allUsers, master) => {\n  allUsers.forEach((user =>\n    RP(spotify.setPlaybackOptions(user, master, config.PLAYBACK_DELAY))\n      .catch(e => console.log(e.message))));\n}\n\n// polling loop at 350ms\nconst pollUsersPlayback = () => {\n  setInterval(() => {\n    rooms.forEach(\n      (room) => {\n        // console.log('syncing ', room.users.length , ' users in room ', room.roomId);\n        syncToMaster(room.host, room.users);\n      });\n  }, 350);\n};\n\nconst checkCurrentTrack = (user) => {\n  return new Promise(function (resolve, reject) {\n    return RP(spotify.getPlaybackOptions(user)).then((res) => {\n      const master_ref = {\n        track_uri: res.item.uri,\n        track_name: res.item.name,\n        artist_name: res.item.artists[0].name,\n        play_position: res.progress_ms,\n        selector_name: user.name,\n        selector_token: user.token\n      }\n      return resolve(master_ref);\n    })\n      .catch(e => reject(`in checkCurrentTrack ${e.message}`));\n  });\n};\n\n// START SERVER AND SOCKET\nconst app = express()\n  .use('/', router)\n  .listen(config.SERVER_PORT, () => console.log(`Listening on ${config.SERVER_PORT }`));\n\n// CONNECT TO WEBSOCKET THROUGH wss://<app-name>.herokuapp.com:443/socket\nwss = new SocketServer({ server: app, path: \"/socket\" });\n\nwss.on('connection', function connection(ws) {\n // send system and message_buffer from global state every 200ms and then reset state\n  setInterval(\n    () => {\n     wss.clients.forEach((client) => {\n        system_message_buffer && client.send(system_message_buffer)\n        message_buffer && client.send(message_buffer)\n      });\n      message_buffer = ''\n      system_message_buffer = ''\n    },200)\n});"]}
{"version":3,"sources":["../src/server.js"],"names":["require","config","SocketServer","Server","RP","spotify","urls","router","express","Router","allowCrossDomain","req","res","next","header","method","send","use","setHeader","wss","master","track_uri","track_name","artist_name","play_position","selector_name","selector_token","album_cover","host","token","name","users","rooms","system_message_buffer","JSON","stringify","type","user_object","master_object","message","roomId","message_buffer","getCurrentUser","allUsers","user_to_return","forEach","user","get","state","cookie","STATE_KEY","redirect","querystring","spotifyOptions","HOST_REDIRECT_URI","MODE","console","log","query","GUEST_REDIRECT_URI","code","storedState","headers","split","queryStringError","clearCookie","post","authOptions","error","response","body","statusCode","access_token","getUserOptions","then","user_details","display_name","push","CONNECTION","pollUsersPlayback","catch","ERROR","e","newUser","checkCurrentTrack","obj","setPlaybackOptions","PLAYBACK_DELAY","room_index","findIndex","x","user_index","splice","json","syncToMaster","allRoomUsers","some","result","getTrack","track","album","images","url","SELECTOR_CALLS","Math","floor","random","length","clients","each","client","indexOf","resync","setInterval","room","Promise","resolve","reject","getPlaybackOptions","master_ref","item","uri","artists","progress_ms","app","listen","SERVER_PORT","server","path","on","connection","ws"],"mappings":"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","file":"server.js","sourcesContent":["/*jshint esversion: 6 */\n// SETTINGS\n// DEPENDANCIES\nrequire('dotenv').config();\nimport express from 'express';\nimport querystring from 'querystring';\nconst SocketServer = require('ws').Server;\nconst RP = require('request-promise');\nconst spotify = require('./utils/spotify_func');\nconst config = require('./utils/config');\nconst urls = require('./utils/urls');\n\n// IMPORTS\nimport {URLfactory, defaultNameCheck, generateRandomString, wait_promise, queryStringError, makeBuffer} from './utils/tools'\nimport {SELECTOR_CALLS, ERROR, MODE, CONNECTION} from './utils/constants'\n\nconst router = express.Router();\n\n// Cross Domain Origin Setup\nvar allowCrossDomain = function (req, res, next) {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n  if ('OPTIONS' == req.method) {\n    res.send(200);\n  }\n  else {\n    next();\n  }\n};\n\nexpress().use(allowCrossDomain);\nexpress().use(function (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n  res.setHeader('Access-Control-Allow-Credentials', true);\n  next();\n});\n\n// Global state\nlet wss\nlet master = {\n  track_uri: null,\n  track_name: null,\n  artist_name: null,\n  play_position: null,\n  selector_name: null,\n  selector_token: null,\n  album_cover: null,\n};\nconst host = { token: null, name: null };\nlet users = [];\nlet rooms = [];\nlet system_message_buffer = JSON.stringify({\n  type: '',\n  user_object: {},\n  master_object: {},\n  message: 'test',\n  roomId: null\n});\nlet message_buffer = JSON.stringify({\n  type: '',\n  user_object: {},\n  master_object: {},\n  message: 'test',\n  roomId: null\n});\n\n\n// get user details object from Spotify with token\nconst getCurrentUser = (token) => {\n  let allUsers = [...users, host];\n  let user_to_return;\n  allUsers.forEach(user => {\n    if (user.token === token) {\n      user_to_return = user;\n    }\n  });\n  return user_to_return;\n};\n\n\n// Endpoints \n// Host login\nrouter.get('/login', function (req, res) {\n  const state = generateRandomString(16);\n  res.cookie(config.STATE_KEY, state);\n  if (!host.token) {\n    res.redirect(`https://accounts.spotify.com/authorize?${querystring.stringify(spotify.spotifyOptions(urls.HOST_REDIRECT_URI[config.MODE], state))}`)\n  } else {\n    res.redirect(URLfactory('alreadyHosted'));\n    console.log('already hosted')\n  }\n});\n// Guest Login\nrouter.get('/invite', function (req, res) {\n  const state = generateRandomString(16);\n  const roomId = req.query.roomId;\n  console.log(roomId);\n  res.cookie(config.STATE_KEY, state);\n  console.log(`https://accounts.spotify.com/authorize?${querystring.stringify(spotify.spotifyOptions(urls.GUEST_REDIRECT_URI[config.MODE], roomId))}`);\n  res.redirect(`https://accounts.spotify.com/authorize?${querystring.stringify(spotify.spotifyOptions(urls.GUEST_REDIRECT_URI[config.MODE], roomId))}`);\n});\n// Host Callback from spotify\nrouter.get('/callback', function (req, res) {\n  const code = req.query.code || null;\n  const state = req.query.state || null;\n  const storedState = req.headers.cookie ? req.headers.cookie.split(`${config.STATE_KEY}=`)[1] : null;\n  if (state === null || state !== storedState) {\n    res.redirect('/#' + queryStringError);\n  } else {\n    res.clearCookie(config.STATE_KEY);\n\n    RP.post(spotify.authOptions(urls.HOST_REDIRECT_URI[config.MODE], code), function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        host.token = body.access_token;\n        /* get user details and start websockets. Send greeting and token to client then start\n        polling the spotify api for track changes */\n        RP(spotify.getUserOptions(host))\n          .then((user_details) => {\n            host.name = defaultNameCheck(user_details.display_name);\n            let roomId = generateRandomString(8);\n            rooms.push({ roomId : roomId, host: host, users:[] });\n            system_message_buffer = makeBuffer(`${defaultNameCheck(host.name)} stepped up to the 1210s..`, host, master, CONNECTION)\n            res.redirect(URLfactory('hostLoggedIn?' + querystring.stringify({ token: host.token, roomId: roomId })));\n            pollUsersPlayback();\n          })\n          .catch(e => {\n            res.redirect(URLfactory('getting_host_options', ERROR));\n            console.log('Getting host options ', e)\n          });\n      } else {\n        res.redirect(URLfactory('spotify_host_auth', ERROR));\n        console.log('Spotify host auth ', e)\n      }\n    });\n  }\n});\n// Guest callback from Spotify\nrouter.get('/guestcallback', function (req, res) {\n  const code = req.query.code || null;\n  const roomId = req.query.state || null;\n  if (!code || !roomId) {\n    res.redirect('/#' + queryStringError);\n  } else {\n    res.clearCookie(config.STATE_KEY);\n\n    RP.post(spotify.authOptions(urls.GUEST_REDIRECT_URI[config.MODE], code), function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        let newUser = {};\n        newUser.token = body.access_token;\n        RP(spotify.getUserOptions(newUser))\n          .then( user_details => {\n            console.log(`${user_details.name} trying to join.`);\n            newUser.name = user_details.display_name;\n\n            return checkCurrentTrack(host, master);\n          })\n          .then( obj => {\n            master = obj;\n            // after current track in master state is checked set playback for current user\n            return RP(spotify.setPlaybackOptions(newUser, master, config.PLAYBACK_DELAY));\n          })\n          .then( () => {\n            // find room and add user\n            let room_index = rooms.findIndex(x => x.roomId == roomId);\n            console.log(room_index);\n            rooms[room_index].users.push(newUser);\n            system_message_buffer = makeBuffer(`${defaultNameCheck(newUser.name)} joined the party...`, newUser, master, CONNECTION)\n            res.redirect(URLfactory('guestLoggedIn?' + querystring.stringify({ token: newUser.token })))\n          })\n          .catch(e => {\n            res.redirect(URLfactory('guest_sync', ERROR))\n            console.log('Error in guest sync ', e)\n          })\n      } else {\n        res.redirect(URLfactory('guest_callback', ERROR))\n        console.log('Error in guest callback ', e)\n      }\n    })\n  }\n});\n// Remove user from room\nrouter.get('/removeuser', function (req, res) {\n  console.log('attempting to remove user');\n  const token = req.query.token || null;\n  const roomId = req.query.roomId || null;\n  const state = req.query.state || null;\n    // find room and user\n    let room_index = rooms.findIndex(x => x.roomId == roomId);\n    let user_index = rooms[room_index].users.findIndex(x => x.token == token);\n    if(room_index > -1 && user_index > -1){\n      rooms[room_index].users.splice(user_index, 1);\n      console.log('user removed');\n      //TODO: STOP PLAYBACK FOR REMOVED USER?\n      res.json(true);\n    }\n    else if (rooms[room_index].host.token === token){\n      console.log('user is current host');\n      //TODO: REMOVE HOST AND ALL USERS?\n      res.json(true);\n    }else{\n      console.log('room or user could not be found');\n      res.json(false);\n    }\n});\n\n\nconst syncToMaster = (host, users, roomId) => {\n  if (host.token && users) {\n    let allRoomUsers = [...users, host]\n    // make reference to users, leave global users array immutable\n    allRoomUsers.some(\n      (user) => {\n        wait_promise(350)\n          .then(() => checkCurrentTrack(user))\n          .then(result => {\n            if (result.track_uri !== master.track_uri) {\n              // Check users current track, if URI is different to one in master state ...\n              master = result\n              return RP(spotify.getTrack(user, master.track_uri.split('track:')[1]))\n                .then((track)=>{\n                  master.album_cover = track.album.images[0].url\n                  /* get the new tracks cover image and set the master to the new track that is taking over\n                  then set the system message buffer to send update info to the client */\n                  system_message_buffer = makeBuffer(\n                    `${defaultNameCheck(master.selector_name)} ${SELECTOR_CALLS[Math.floor(Math.random() * SELECTOR_CALLS.length)]} ${master.track_name}!!`,\n                    user,\n                    master,\n                    roomId,\n                    'track_change'\n                  )\n                  wss.clients.forEach(function each(client) {\n                    client.send(system_message_buffer);\n                  });\n                  /* remove the current user from the reference to the array of users\n                  and then run through all the remaining users setting their track details to master */\n                  allRoomUsers.splice(allRoomUsers.indexOf(user), 1)\n                  resync(allRoomUsers, master);\n                  return true\n                })\n            }\n          })\n          .catch(e => console.log('Error in sync to master ', e.message))\n      })\n  } else {\n    // console.log('only one user in the room');\n  }\n}\n\nconst resync = (allUsers, master) => {\n  allUsers.forEach((user =>\n    RP(spotify.setPlaybackOptions(user, master, config.PLAYBACK_DELAY))\n      .catch(e => console.log(e.message))));\n}\n\n// polling loop at 350ms\nconst pollUsersPlayback = () => {\n  setInterval(() => {\n    rooms.forEach(\n      (room) => {\n        // console.log('syncing ', room.users.length , ' users in room ', room.roomId);\n        syncToMaster(room.host, room.users, room.roomId);\n      });\n  }, 350);\n};\n\nconst checkCurrentTrack = (user) => {\n  return new Promise(function (resolve, reject) {\n    return RP(spotify.getPlaybackOptions(user)).then((res) => {\n      const master_ref = {\n        track_uri: res.item.uri,\n        track_name: res.item.name,\n        artist_name: res.item.artists[0].name,\n        play_position: res.progress_ms,\n        selector_name: user.name,\n        selector_token: user.token\n      }\n      return resolve(master_ref);\n    })\n      .catch(e => reject(`in checkCurrentTrack ${e.message}`));\n  });\n};\n\n// START SERVER AND SOCKET\nconst app = express()\n  .use('/', router)\n  .listen(config.SERVER_PORT, () => console.log(`Listening on ${config.SERVER_PORT }`));\n\n// CONNECT TO WEBSOCKET THROUGH wss://<app-name>.herokuapp.com:443/socket\nwss = new SocketServer({ server: app, path: \"/socket\" });\n\nwss.on('connection', function connection(ws) {\n // send system and message_buffer from global state every 200ms and then reset state\n  setInterval(\n    () => {\n     wss.clients.forEach((client) => {\n        message_buffer && client.send(message_buffer)\n      });\n      message_buffer = ''\n      system_message_buffer = ''\n    },200)\n});"]}
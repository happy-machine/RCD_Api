{"version":3,"sources":["../../src/utils/tools.js"],"names":["config","require","urls","querystring","URLfactory","endpoint","error","port","CLIENT_PORT","mode","MODE","DEPLOY","URL_ROOT","defaultNameCheck","name","generateRandomString","length","text","possible","i","charAt","Math","floor","random","wait_promise","time","Promise","resolve","setTimeout","queryStringError","stringify","makeBuffer","message","user_object","master","type","JSON","master_object"],"mappings":";;;;;;;AAGA;;AAHA,IAAMA,SAASC,QAAQ,UAAR,CAAf;AACA,IAAMC,OAAOD,QAAQ,QAAR,CAAb;AACA,IAAME,cAAcF,QAAQ,aAAR,CAApB;AAGO,IAAMG,kCAAa,SAAbA,UAAa,CAACC,QAAD,EAA4E;AAAA,QAAjEC,KAAiE,uEAAzD,KAAyD;AAAA,QAAlDC,IAAkD,uEAA3CP,OAAOQ,WAAoC;AAAA,QAAvBC,IAAuB,uEAAhBT,OAAOU,IAAS;;AAClG,QAAKD,SAASE,iBAAd,EAAsB;AAClB,YAAIL,KAAJ,EAAW;AACP,mBAAOJ,KAAKU,QAAL,CAAcH,IAAd,IAAsB,eAAtB,GAAwCJ,QAA/C;AACH,SAFD,MAEO;AACH,mBAAOH,KAAKU,QAAL,CAAcH,IAAd,IAAsB,GAAtB,GAA4BJ,QAA5B,GAAuC,GAA9C;AACH;AACJ,KAND,MAMO;AACH,YAAIC,KAAJ,EAAW;AACP,mBAAOJ,KAAKU,QAAL,CAAcH,IAAd,IAAsBF,IAAtB,GAA6B,eAA7B,GAA+CF,QAAtD;AACH,SAFD,MAEO;AACH,mBAAOH,KAAKU,QAAL,CAAcH,IAAd,IAAsBF,IAAtB,GAA6B,GAA7B,GAAmCF,QAAnC,GAA8C,GAArD;AACH;AACJ;AACJ,CAdM;;AAgBA,IAAMQ,8CAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACtC,QAAIA,SAAS,IAAb,EAAmB;AACjB,eAAO,+BAAP;AACD,KAFD,MAEO;AACL,eAAOA,IAAP;AACD;AACF,CANI;;AAQA,IAAIC,sDAAuB,SAAvBA,oBAAuB,CAAUC,MAAV,EAAkB;AAChD,QAAIC,OAAO,EAAX;AACA,QAAIC,WAAW,gEAAf;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EAAiC;AAC/BF,gBAAQC,SAASE,MAAT,CAAgBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBL,SAASF,MAApC,CAAhB,CAAR;AACD;AACD,WAAOC,IAAP;AACD,CAPI;;AASA,IAAMO,sCAAe,SAAfA,YAAe,CAACC,IAAD,EAAU;AAClC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,mBAAW,YAAM;AACfD;AACD,SAFD,EAEGF,IAFH;AAGD,KAJM,CAAP;AAKD,CANI;;AAQA,IAAMI,8CAAmB1B,YAAY2B,SAAZ,CAAsB;AAClDxB,WAAO;AAD2C,CAAtB,CAAzB;;AAIA,IAAMyB,kCAAa,SAAbA,UAAa,CAACC,OAAD,EAAUC,WAAV,EAAuBC,MAAvB,EAAsD;AAAA,QAAvBC,IAAuB,uEAAhB,SAAgB;;AAC5E,WAAOC,KAAKN,SAAL,CAAe;AAClBK,cAAMA,IADY;AAElBH,iBAASA,OAFS;AAGlBC,qBAAaA,WAHK;AAIlBI,uBAAeH;AAJG,KAAf,CAAP;AAMH,CAPM","file":"tools.js","sourcesContent":["const config = require('./config');\nconst urls = require('./urls');\nconst querystring = require('querystring');\nimport {DEPLOY} from './constants'\n\nexport const URLfactory = (endpoint, error = false, port = config.CLIENT_PORT, mode = config.MODE) => {\n    if ( mode === DEPLOY) {\n        if (error) {\n            return urls.URL_ROOT[mode] + '/error?error=' + endpoint;\n        } else {\n            return urls.URL_ROOT[mode] + '/' + endpoint + '/';\n        }\n    } else {\n        if (error) {\n            return urls.URL_ROOT[mode] + port + '/error?error=' + endpoint;\n        } else {\n            return urls.URL_ROOT[mode] + port + '/' + endpoint + '/';\n        }\n    }\n}\n\nexport const defaultNameCheck = (name) => {\n    if (name === null) {\n      return 'the one like the DJ Anonymous';\n    } else {\n      return name;\n    }\n  };\n  \nexport let generateRandomString = function (length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n\nexport const wait_promise = (time) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, time);\n    });\n  };\n  \nexport const queryStringError = querystring.stringify({\n    error: 'state_mismatch'\n});\n\nexport const makeBuffer = (message, user_object, master, type = 'message', ) => {\n    return JSON.stringify({\n        type: type,\n        message: message,\n        user_object: user_object,\n        master_object: master\n      });\n}\n"]}